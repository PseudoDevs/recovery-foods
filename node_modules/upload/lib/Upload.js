"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Upload = void 0;
var url_1 = require("url");
var form_data_1 = __importDefault(require("form-data"));
var Upload = /** @class */ (function () {
    function Upload(options) {
        this.events = {
            state: new Set(),
            error: new Set(),
            progress: new Set(),
        };
        this._uploadedBytes = 0;
        this._totalBytes = 0;
        this._state = 'new';
        if (!options) {
            throw new Error('Options are required.');
        }
        if (!options.url || typeof options.url !== 'string') {
            throw new Error('Destination URL is missing or invalid.');
        }
        this.form = options.form;
        this.url = options.url;
        this.headers = options.headers;
    }
    /**
     * POSTs the form.
     */
    Upload.prototype.upload = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var e_1, _a, e_2, _b, e_3, _c;
            // Check if we're running in a browser.
            if (typeof window !== 'undefined' &&
                typeof XMLHttpRequest !== 'undefined') {
                _this.xhr = new XMLHttpRequest();
                _this.xhr.open('POST', _this.url, true);
                if (typeof _this.headers === 'object') {
                    try {
                        for (var _d = __values(Object.keys(_this.headers)), _e = _d.next(); !_e.done; _e = _d.next()) {
                            var headerName = _e.value;
                            _this.xhr.setRequestHeader(headerName, _this.headers[headerName]);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
                _this.xhr.addEventListener('loadstart', function () {
                    _this.setState('started');
                });
                if (_this.xhr.upload) {
                    _this.xhr.upload.addEventListener('progress', function (e) {
                        if (_this._totalBytes !== e.total) {
                            _this.setTotalBytes(e.total);
                        }
                        _this.setUploadedBytes(e.loaded);
                    });
                }
                _this.xhr.addEventListener('load', function () {
                    var e_4, _a;
                    if (_this.xhr) {
                        _this.setUploadedBytes(_this.totalBytes);
                        _this.setState('successful');
                        var response = {};
                        var lines = _this.xhr
                            .getAllResponseHeaders()
                            .replace(/\r/g, '')
                            .split('\n');
                        var headers = {};
                        try {
                            for (var lines_1 = __values(lines), lines_1_1 = lines_1.next(); !lines_1_1.done; lines_1_1 = lines_1.next()) {
                                var line = lines_1_1.value;
                                var split = line.split(':');
                                if (split.length != 2) {
                                    continue;
                                }
                                headers[split[0].trim()] = split[1].trim();
                            }
                        }
                        catch (e_4_1) { e_4 = { error: e_4_1 }; }
                        finally {
                            try {
                                if (lines_1_1 && !lines_1_1.done && (_a = lines_1.return)) _a.call(lines_1);
                            }
                            finally { if (e_4) throw e_4.error; }
                        }
                        response.headers = headers;
                        switch (_this.xhr.responseType) {
                            case 'json':
                                response.data = JSON.stringify(_this.xhr.response);
                                break;
                            default:
                                response.data = _this.xhr.response;
                        }
                        resolve(response);
                    }
                });
                _this.xhr.addEventListener('error', function () {
                    _this.setState('failed');
                    _this.emit('error');
                    reject();
                });
                _this.xhr.addEventListener('abort', function () {
                    _this.setState('aborted');
                });
                if (_this.form instanceof FormData) {
                    _this.xhr.send(_this.form);
                }
                else {
                    var form = _this.form;
                    var formData = new FormData();
                    try {
                        for (var _f = __values(Object.keys(_this.form)), _g = _f.next(); !_g.done; _g = _f.next()) {
                            var key = _g.value;
                            formData.set(key, form[key]);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    _this.xhr.send(formData);
                }
            }
            else {
                var callback = function (error, res) {
                    if (error) {
                        _this.setState('failed');
                        _this.emit('error');
                        reject();
                    }
                    else {
                        _this.setUploadedBytes(_this.totalBytes);
                        _this.setState('successful');
                        var body_1 = '';
                        res.on('readable', function () {
                            var chunk = res.read();
                            if (chunk) {
                                body_1 += chunk;
                            }
                        });
                        res.on('end', function () {
                            var response = {};
                            response.data = body_1;
                            response.headers = res.headers;
                            resolve(response);
                        });
                    }
                };
                var url = new url_1.URL(_this.url);
                var options = {
                    hostname: url.hostname,
                    port: url.port,
                    path: url.pathname,
                    method: 'POST',
                    headers: _this.headers,
                };
                var formData = void 0;
                if (_this.form instanceof form_data_1.default) {
                    formData = _this.form;
                }
                else {
                    var form = _this.form;
                    formData = new form_data_1.default();
                    try {
                        for (var _h = __values(Object.keys(_this.form)), _j = _h.next(); !_j.done; _j = _h.next()) {
                            var key = _j.value;
                            formData.append(key, form[key]);
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                }
                formData.getLength(function (error, length) {
                    _this.setTotalBytes(length);
                });
                formData.on('data', function (chunk) {
                    if (_this.state === 'new') {
                        _this.setState('started');
                    }
                    if (chunk.hasOwnProperty('length')) {
                        _this.increaseUploadedBytes(chunk.length);
                    }
                });
                formData.submit(options, callback);
            }
        });
    };
    Upload.prototype.abort = function () {
        var _a;
        (_a = this.xhr) === null || _a === void 0 ? void 0 : _a.abort();
    };
    Object.defineProperty(Upload.prototype, "uploadedBytes", {
        get: function () {
            return this._uploadedBytes;
        },
        enumerable: false,
        configurable: true
    });
    Upload.prototype.setUploadedBytes = function (value) {
        this._uploadedBytes = value;
        this.emit('progress', this.progress);
    };
    Upload.prototype.increaseUploadedBytes = function (value) {
        this._uploadedBytes += value;
        this.emit('progress', this.progress);
    };
    Object.defineProperty(Upload.prototype, "totalBytes", {
        get: function () {
            return this._totalBytes;
        },
        enumerable: false,
        configurable: true
    });
    Upload.prototype.setTotalBytes = function (value) {
        this._totalBytes = value;
        this.emit('progress', this.progress);
    };
    Object.defineProperty(Upload.prototype, "progress", {
        /**
         * Current upload progress. A float between 0 and 1.
         */
        get: function () {
            return this._totalBytes === 0 ? 0 : this._uploadedBytes / this._totalBytes;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Upload.prototype, "state", {
        get: function () {
            return this._state;
        },
        enumerable: false,
        configurable: true
    });
    Upload.prototype.setState = function (value) {
        var oldState = this._state;
        this._state = value;
        if (oldState !== this._state) {
            this.emit('state', this._state);
        }
    };
    /**
     * Adds a listener for a given event.
     * @param eventType Event type.
     * @param listener Listener function.
     */
    Upload.prototype.on = function (eventType, listener) {
        this.events[eventType].add(listener);
    };
    /**
     * Removes a listener for a given event.
     * @param eventType Event type.
     * @param listener Listener function.
     */
    Upload.prototype.off = function (eventType, listener) {
        this.events[eventType].delete(listener);
    };
    Upload.prototype.emit = function (eventType) {
        var e_5, _a;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        try {
            for (var _b = __values(this.events[eventType]), _c = _b.next(); !_c.done; _c = _b.next()) {
                var listener = _c.value;
                listener.apply(this, args);
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_5) throw e_5.error; }
        }
    };
    return Upload;
}());
exports.Upload = Upload;
